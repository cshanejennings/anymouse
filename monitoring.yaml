# CloudWatch monitoring resources for Anymouse service
# Add to template.yaml or deploy separately

Resources:
  # CloudWatch Alarms
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "anymouse-${Stage}-high-error-rate"
      AlarmDescription: High error rate detected for Anymouse API
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub "anymouse-api-${Stage}"
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  ServerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "anymouse-${Stage}-server-errors"
      AlarmDescription: Server errors detected for Anymouse API
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub "anymouse-api-${Stage}"
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  HighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "anymouse-${Stage}-high-latency"
      AlarmDescription: High latency detected for Anymouse API
      MetricName: Latency
      Namespace: AWS/ApiGateway
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub "anymouse-api-${Stage}"
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "anymouse-${Stage}-lambda-errors"
      AlarmDescription: Lambda function errors detected
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Sub "anymouse-${Stage}"
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  LambdaThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "anymouse-${Stage}-lambda-throttles"
      AlarmDescription: Lambda function throttling detected
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Sub "anymouse-${Stage}"
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # SNS Topic for alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "anymouse-alerts-${Stage}"
      DisplayName: !Sub "Anymouse ${Stage} Alerts"

  # CloudWatch Dashboard
  AnymouseDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "Anymouse-${Stage}"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "anymouse-api-${Stage}" ],
                  [ ".", "4XXError", ".", "." ],
                  [ ".", "5XXError", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Requests",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Latency", "ApiName", "anymouse-api-${Stage}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Latency",
                "period": 300,
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "anymouse-${Stage}" ],
                  [ ".", "Invocations", ".", "." ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Throttles", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Function Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "ConcurrentExecutions", "FunctionName", "anymouse-${Stage}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Concurrent Executions",
                "period": 300
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 12,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/lambda/anymouse-${Stage}'\n| fields @timestamp, @message\n| filter @message like /ERROR/\n| sort @timestamp desc\n| limit 100",
                "region": "${AWS::Region}",
                "title": "Recent Lambda Errors",
                "view": "table"
              }
            }
          ]
        }

  # Custom Metrics for business logic
  AnonymizationMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Sub "/aws/lambda/anymouse-${Stage}"
      FilterPattern: "[timestamp, requestId, level=\"INFO\", action=\"anonymize\", status, source_ip]"
      MetricTransformations:
        - MetricNamespace: Anymouse
          MetricName: AnonymizationRequests
          MetricValue: "1"
          DefaultValue: 0

  DeanonymizationMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Sub "/aws/lambda/anymouse-${Stage}"
      FilterPattern: "[timestamp, requestId, level=\"INFO\", action=\"deanonymize\", status, source_ip]"
      MetricTransformations:
        - MetricNamespace: Anymouse
          MetricName: DeanonymizationRequests
          MetricValue: "1"
          DefaultValue: 0

  AuthFailureMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Sub "/aws/lambda/anymouse-${Stage}"
      FilterPattern: "[timestamp, requestId, level=\"INFO\", action=\"auth_check\", status=\"401\", source_ip]"
      MetricTransformations:
        - MetricNamespace: Anymouse
          MetricName: AuthenticationFailures
          MetricValue: "1"
          DefaultValue: 0

  # Alarm for too many auth failures (potential attack)
  AuthFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "anymouse-${Stage}-auth-failures"
      AlarmDescription: High number of authentication failures detected
      MetricName: AuthenticationFailures
      Namespace: Anymouse
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

Outputs:
  AlertTopicArn:
    Description: SNS Topic ARN for alerts
    Value: !Ref AlertTopic
    Export:
      Name: !Sub "${AWS::StackName}-AlertTopic"

  DashboardURL:
    Description: CloudWatch Dashboard URL
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=Anymouse-${Stage}"
    Export:
      Name: !Sub "${AWS::StackName}-Dashboard"
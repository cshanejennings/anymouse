name: Deploy Anymouse Service

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: anymouse

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -m spacy download en_core_web_sm
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short --junitxml=test-results.xml
    
    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r anymouse/ -f json -o bandit-results.json || true
        safety check --json --output safety-results.json || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          bandit-results.json
          safety-results.json

  build:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.optimized
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Deploy to development
      run: |
        sam deploy \
          --template-file template.yaml \
          --stack-name anymouse-dev \
          --parameter-overrides \
            Stage=dev \
            LambdaMemorySize=1024 \
            ProvisionedConcurrency=0 \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }} \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset
    
    - name: Run integration tests
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name anymouse-dev \
          --query 'Stacks[0].Outputs[?OutputKey==`AnymouseApi`].OutputValue' \
          --output text)
        API_KEY=$(aws cloudformation describe-stacks \
          --stack-name anymouse-dev \
          --query 'Stacks[0].Outputs[?OutputKey==`AnymouseApiKey`].OutputValue' \
          --output text)
        
        python -m pytest tests/integration/ -v \
          --api-url "$API_URL" \
          --api-key "$API_KEY"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Deploy to staging
      run: |
        sam deploy \
          --template-file template.yaml \
          --stack-name anymouse-staging \
          --parameter-overrides \
            Stage=staging \
            LambdaMemorySize=1536 \
            ProvisionedConcurrency=2 \
            EnableWAF=true \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }} \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset
    
    - name: Run performance tests
      run: |
        pip install aiohttp pandas matplotlib
        ./run_performance_tests.sh staging
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results-staging
        path: performance_results/

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Deploy to production
      run: |
        sam deploy \
          --template-file template.yaml \
          --stack-name anymouse-prod \
          --parameter-overrides \
            Stage=prod \
            LambdaMemorySize=2048 \
            ProvisionedConcurrency=5 \
            EnableWAF=true \
            AllowedIPs="${{ secrets.PROD_ALLOWED_IPS }}" \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }} \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset
    
    - name: Setup monitoring
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name anymouse-prod \
          --query 'Stacks[0].Outputs[?OutputKey==`AnymouseApi`].OutputValue' \
          --output text)
        API_KEY=$(aws cloudformation describe-stacks \
          --stack-name anymouse-prod \
          --query 'Stacks[0].Outputs[?OutputKey==`AnymouseApiKey`].OutputValue' \
          --output text)
        
        # Setup email alerts
        ./setup-alerts.sh prod "${{ secrets.ALERT_EMAIL }}"
    
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Anymouse Service Release ${{ github.ref_name }}
          
          **Deployed to Production** ðŸš€
          
          ### Changes
          See commit history for detailed changes.
          
          ### Deployment Details
          - **Environment**: Production
          - **Region**: ${{ env.AWS_REGION }}
          - **Container Image**: ${{ needs.build.outputs.image-tag }}
          - **Memory**: 2048MB
          - **Provisioned Concurrency**: 5 instances
          - **WAF**: Enabled
          
          ### API Access
          - API endpoint available in AWS Console
          - Monitoring dashboard configured
          - Email alerts active
        draft: false
        prerelease: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'